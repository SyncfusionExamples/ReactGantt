{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","dataSource","taskID","taskName","startDate","Date","subtasks","duration","progress","holidays","from","label","eventMarkers","day","taskFields","id","name","child","height","projectStartDate","projectEndDate","timelineSettings","topTier","unit","format","bottomTier","count","allowSorting","allowFiltering","highlightWeekends","editSettings","allowAdding","allowEditing","allowDeleting","allowTaskbarEditing","mode","toolbar","enableContextMenu","allowSelection","selectionSettings","type","services","Sort","Filter","DayMarkers","Edit","Toolbar","ContextMenu","Selection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSA8GeA,MAxGf,WACE,IAAMC,EAAa,CACjB,CACEC,OAAQ,EACRC,SAAU,WACVC,UAAW,IAAIC,KAAK,cACpBC,SAAU,CACR,CACEJ,OAAQ,EACRC,SAAU,gBACVC,UAAW,IAAIC,KAAK,cACpBE,SAAU,EACVC,SAAU,IAEZ,CACEN,OAAQ,EACRC,SAAU,cACVC,UAAW,IAAIC,KAAK,cACpBE,SAAU,EACVC,SAAU,IAEZ,CACEN,OAAQ,EACRC,SAAU,qBACVC,UAAW,IAAIC,KAAK,cACpBE,SAAU,EACVC,SAAU,KAEZ,CACEN,OAAQ,EACRC,SAAU,oBACVC,UAAW,IAAIC,KAAK,cACpBE,SAAU,EACVC,SAAU,MAwBZC,EAAW,CACf,CACEC,KAAM,IAAIL,KAAK,KAAM,EAAG,GACxBM,MAAO,cAGLC,EAAe,CACnB,CACEC,IAAK,IAAIR,KAAK,KAAM,EAAG,GACvBM,MAAO,mBAeX,OACC,6BACG,kBAAC,IAAD,CAAgBV,WAAYA,EAAYa,WA7CzB,CACjBC,GAAI,SACJC,KAAM,WACNZ,UAAW,YACXG,SAAU,WACVU,MAAO,WACPT,SAAU,YAuCwDU,OAAO,QACrEC,iBAAkB,IAAId,KAAK,KAAM,EAAG,GACpCe,eAAgB,IAAIf,KAAK,KAAM,EAAG,IAClCgB,iBAxCmB,CACvBC,QAAS,CACPC,KAAM,MACNC,OAAQ,iBAEVC,WAAY,CACVF,KAAM,OACNG,MAAO,EACPF,OAAQ,MAiCNG,cAAc,EACdC,gBAAgB,EAChBC,mBAAmB,EACnBpB,SAAUA,EACVG,aAAcA,EACdkB,aAvBe,CACnBC,aAAa,EACbC,cAAc,EACdC,eAAe,EACfC,qBAAqB,EACrBC,KAAM,UAmBFC,QAjBe,CAAC,MAAO,OAAQ,SAAU,SAAU,SAAU,YAAa,eAkB1EC,mBAAmB,EACnBC,gBAAgB,EAChBC,kBAnBoB,CACxBJ,KAAM,MACNK,KAAM,aAmBF,kBAAC,IAAD,CAAQC,SAAU,CAACC,IAAMC,IAAQC,IAAYC,IAAMC,IAASC,IAAaC,UC5F7DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3c15f276.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  GanttComponent, Inject, Sort, Filter, DayMarkers,\n  Edit, Toolbar, ContextMenu, Selection\n} from '@syncfusion/ej2-react-gantt';\n\nfunction App() {\n  const dataSource = [\n    {\n      taskID: 1,\n      taskName: \"Planning\",\n      startDate: new Date(\"02/06/2019\"),\n      subtasks: [\n        {\n          taskID: 2,\n          taskName: \"Plan timeline\",\n          startDate: new Date(\"02/05/2019\"),\n          duration: 3,\n          progress: 50\n        },\n        {\n          taskID: 3,\n          taskName: \"Plan budget\",\n          startDate: new Date(\"02/07/2019\"),\n          duration: 3,\n          progress: 50\n        },\n        {\n          taskID: 4,\n          taskName: \"Allocate resources\",\n          startDate: new Date(\"02/10/2019\"),\n          duration: 3,\n          progress: 100\n        },\n        {\n          taskID: 5,\n          taskName: \"Planning complete\",\n          startDate: new Date(\"02/13/2019\"),\n          duration: 0,\n          progress: 0\n        }\n      ]\n    }\n  ];\n  const taskFields = {\n    id: 'taskID',\n    name: 'taskName',\n    startDate: 'startDate',\n    duration: 'duration',\n    child: 'subtasks',\n    progress: 'progress'\n  };\n  const timelineSettings = {\n    topTier: {\n      unit: 'Day',\n      format: 'dddd MMM yyyy'\n    },\n    bottomTier: {\n      unit: 'Hour',\n      count: 8,\n      format: 'H'\n    }\n  };\n  const holidays = [\n    { \n      from: new Date(2019, 1, 7),\n      label: 'HOLIDAY 1'\n    }\n  ];\n  const eventMarkers = [\n    {\n      day: new Date(2019, 1, 4),\n      label: 'Project Starts'\n    }\n  ];\n  const editSettings = {\n    allowAdding: true,\n    allowEditing: true,\n    allowDeleting: true,\n    allowTaskbarEditing: true,\n    mode: 'Dialog'\n  };\n  const toolbarItems = ['Add', 'Edit', 'Delete', 'Update', 'Cancel', 'ExpandAll', 'CollapseAll'];\n  const selectionSettings = {\n    mode: 'Row',\n    type: 'Multiple'\n  };\n  return (\n   <div>\n      <GanttComponent dataSource={dataSource} taskFields={taskFields} height=\"400px\"\n        projectStartDate={new Date(2019, 1, 3)}\n        projectEndDate={new Date(2019, 1, 16)}\n        timelineSettings={timelineSettings}\n        allowSorting={true}\n        allowFiltering={true}\n        highlightWeekends={true}\n        holidays={holidays}\n        eventMarkers={eventMarkers}\n        editSettings={editSettings}\n        toolbar={toolbarItems}\n        enableContextMenu={true}\n        allowSelection={true}\n        selectionSettings={selectionSettings}\n      >\n        <Inject services={[Sort, Filter, DayMarkers, Edit, Toolbar, ContextMenu, Selection]} />\n      </GanttComponent>\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}